
//Hackerrank
Q1:Java Arraylist
Sometimes it's better to use dynamic size arrays. Java's Arraylist can provide you this feature. Try to solve this problem using Arraylist.

You are given n lines. In each line there are zero or more integers. You need to answer a few queries where you need to tell the number located in yth position of xth line.

CODE:
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner scan =new Scanner(System.in);
        int n=scan.nextInt();
        List<List<Integer>>arr=new ArrayList<List<Integer>>();
        
        while(n>0){
            int m=scan.nextInt();
            List<Integer>l=new ArrayList<>();
            while(m>0){
                l.add(scan.nextInt());
                m--;
            }
            arr.add(l);
            n--;
        }
        
        int q=scan.nextInt();
        while(q>0){
            try{
                int i=scan.nextInt();
                int j=scan.nextInt();
                int num=arr.get(i-1).get(j-1);
                System.out.println(num);
            }catch(IndexOutOfBoundsException e){
                System.out.println("ERROR!");
            }
            q--;
            
        }
        
        
    }
}

//Hackerrank
Q2:Java List
For this problem, we have 2 types of queries you can perform on a List:

Insert y at index x:

Insert
x y
Delete the element at index x:

Delete
x
Given a list,L , of N integers, perform Q queries on the list. Once all queries are completed, print the modified list as a single line of space-separated integers.

Code:
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        
        List<Integer>l=new ArrayList<>();
        Scanner scan=new Scanner(System.in);
        int n=scan.nextInt();
        while(n>0){
            l.add(scan.nextInt());
            n--;
        }
        
        int q=scan.nextInt();
     
        while(q>0){
            String s=scan.next();
           
            if(s.equals("Insert")){
                int index=scan.nextInt();
                int element=scan.nextInt();
               
                l.add(index, element);
            }
             
            else if(s.equals("Delete")){
                int index=scan.nextInt();
                l.remove(index);
            }
            q--;
        }
        scan.close();
        for(int num:l){
            System.out.print(num+" ");
        }
    }
}
//Hackerrank
Q3:Java Map
You are given a phone book that consists of people's names and their phone number. After that you will be given some person's name as query. For each query, print the phone number of that person.
Code:
//Complete this code or write your own from scratch
import java.util.*;
import java.io.*;

class Solution{
	public static void main(String []argh)
	{
		Scanner in = new Scanner(System.in);
        
        Map<String,Integer>m=new HashMap<>();
		int n=in.nextInt();
		in.nextLine();
		for(int i=0;i<n;i++)
		{
			String name=in.nextLine();
			int phone=in.nextInt();
			in.nextLine();
            m.put(name, phone);
		}
		while(in.hasNext())
		{
			String s=in.nextLine();
            if(m.containsKey(s)){
                System.out.println(s+"="+m.get(s));
            }
            else{
                System.out.println("Not found");
            }
		}
        
        
	}
}

Q4:Sort a list based on the length of string.
Code:
import java.util.*;
public class Main
{
	public static void main(String[] args) {
	    
	    Comparator<String>cmp=new Comparator<String>(){
	      public int compare(String s1,String s2){
	          if(s1.length()>s2.length()){
	              return 1;
	          }
	          else{
	              return -1;
	          }
	      }  
	    };
		
		List<String> myList=new ArrayList<>();
		myList.add("Shubham");
		myList.add("Yash");
		myList.add("Harsh");
		
		System.out.println(myList);
		
		Collections.sort(myList);
		
		System.out.println(myList);
		
		Collections.sort(myList,cmp);
		
		System.out.println(myList);
	}
}

//Hackerrank
Q5:Java Hashset
In computer science, a set is an abstract data type that can store certain values, without any particular order, and no repeated values(Wikipedia).{1,2,3}  is an example of a set, but {1,2,2} is not a set. Today you will learn how to use sets in java by solving this problem.

You are given n pairs of strings. Two pairs (a,b) and (c,d) are identical if a=c and b=d. That also implies (a,b) is not same as (b,a). After taking each pair as input, you need to print number of unique pairs you currently have.

Complete the code in the editor to solve this problem.

Code:
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

 public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int t = s.nextInt();
        String [] pair_left = new String[t];
        String [] pair_right = new String[t];
        
        for (int i = 0; i < t; i++) {
            pair_left[i] = s.next();
            pair_right[i] = s.next();
        }

//Write your code here
        Set<String>mySet=new HashSet<>();
        
        for(int i=0;i<t;i++){
            mySet.add(pair_left[i]+" "+pair_right[i]);
            System.out.println(mySet.size());
        }
        s.close();
    }
}


//Hackerrank
Q6:Java Sort
You are given a list of student information: ID, FirstName, and CGPA. Your task is to rearrange them according to their CGPA in decreasing order. If two student have the same CGPA, then arrange them according to their first name in alphabetical order. If those two students also have the same first name, then order them according to their ID. No two students have the same ID.

Code:
import java.util.*;

class Student implements Comparable<Student>{
	private int id;
	private String fname;
	private double cgpa;
	public Student(int id, String fname, double cgpa) {
		super();
		this.id = id;
		this.fname = fname;
		this.cgpa = cgpa;
	}
	public int getId() {
		return id;
	}
	public String getFname() {
		return fname;
	}
	public double getCgpa() {
		return cgpa;
	}
    
    public int compareTo(Student that){
        if(this.cgpa<that.cgpa){
            return 1;
        }
        else if(this.cgpa==that.cgpa){
            int stringCompare=this.fname.compareTo(that.fname);
            if(stringCompare!=0){
                return stringCompare;
            }
            else{
                if(this.id>that.id){
                    return 1;
                }
                else{
                    return -1;
                }
            }
        }
        else{
            return -1;
        }
    }
}

public class Solution
{
	public static void main(String[] args){
		Scanner in = new Scanner(System.in);
		int testCases = Integer.parseInt(in.nextLine());
		
		List<Student> studentList = new ArrayList<Student>();
		while(testCases>0){
			int id = in.nextInt();
			String fname = in.next();
			double cgpa = in.nextDouble();
			
			Student st = new Student(id, fname, cgpa);
			studentList.add(st);
			
			testCases--;
		}
        
        Collections.sort(studentList);
      
      	for(Student st: studentList){
			System.out.println(st.getFname());
		}
	}
}

//Hackerrank
Q7:Java Generics
Generic methods are a very efficient way to handle multiple datatypes using a single method. This problem will test your knowledge on Java Generic methods.

Let's say you have an integer array and a string array. You have to write a single method printArray that can print all the elements of both arrays. The method should be able to accept both integer arrays or string arrays.

You are given code in the editor. Complete the code so that it prints the following lines:

1
2
3
Hello
World
Do not use method overloading because your answer will not be accepted.
Code:

import java.io.IOException;
import java.lang.reflect.Method;

class Printer<T>
{
   //Write your code here
   public void printArray(T[] myArray){
       for(int i=0;i<myArray.length;i++){
           System.out.println(myArray[i]);
       }
   }
 
}

public class Solution {


    public static void main( String args[] ) {
        Printer myPrinter = new Printer();
        Integer[] intArray = { 1, 2, 3 };
        String[] stringArray = {"Hello", "World"};
        myPrinter.printArray(intArray);
        myPrinter.printArray(stringArray);
        int count = 0;

        for (Method method : Printer.class.getDeclaredMethods()) {
            String name = method.getName();

            if(name.equals("printArray"))
                count++;
        }

        if(count > 1)System.out.println("Method overloading is not allowed!");
      
    }
}
//Hackerrank
Q8:Java Interface

A Java interface can only contain method signatures and fields. The interface can be used to achieve polymorphism. In this problem, you will practice your knowledge on interfaces.

You are given an interface AdvancedArithmetic which contains a method signature int divisor_sum(int n). You need to write a class called MyCalculator which implements the interface.

divisorSum function just takes an integer as input and return the sum of all its divisors. For example divisors of 6 are 1, 2, 3 and 6, so divisor_sum should return 12. The value of n will be at most 1000.

Read the partially completed code in the editor and complete it. You just need to write the MyCalculator class only. Your class shouldn't be public.

Code:
import java.util.*;
interface AdvancedArithmetic{
  int divisor_sum(int n);
}

//Write your code here
class MyCalculator implements AdvancedArithmetic{
    public int divisor_sum(int n){
        int sum=0;
        for(int i=1;i<=n;i++){
            if(n%i==0){
                sum+=i;
            }
        }
        
        return sum;
    }
}
class Solution{
    public static void main(String []args){
        MyCalculator my_calculator = new MyCalculator();
        System.out.print("I implemented: ");
        ImplementedInterfaceNames(my_calculator);
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.print(my_calculator.divisor_sum(n) + "\n");
      	sc.close();
    }
    /*
     *  ImplementedInterfaceNames method takes an object and prints the name of the interfaces it implemented
     */
    static void ImplementedInterfaceNames(Object o){
        Class[] theInterfaces = o.getClass().getInterfaces();
        for (int i = 0; i < theInterfaces.length; i++){
            String interfaceName = theInterfaces[i].getName();
            System.out.println(interfaceName);
        }
    }
}
//leetcode
Q9:Two Sum
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.
Code:
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int ans[]=new int[2];
        Map<Integer,Integer>m=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(m.containsKey(target-nums[i])){
                ans[0]=m.get(target-nums[i]);
                ans[1]=i;
                break;
            }
            m.put(nums[i],i);
        }

        return ans;
    }
}
//leetcode
Q10:Remove Duplicates from Sorted Array
Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.

Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:

Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.
Return k.

Code:
class Solution {
    public int removeDuplicates(int[] nums) {
        int j=0;
        for(int i=j+1;i<nums.length;i++){
            if(nums[i]!=nums[j]){
                int temp=nums[j+1];
                nums[j+1]=nums[i];
                nums[i]=temp;
                j++;
            }
        }
        return j+1;
    }
}
//leetcode
Q11:Merge Sorted Array
You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

Code:
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int nums[]=new int[m+n];
        int i=0,j=0;
        int k=0;
        while(i<m && j<n){
            if(nums1[i]<nums2[j]){
                nums[k++]=nums1[i++];
            }
            else{
                nums[k++]=nums2[j++];
            }
        }

        while(i<m){
            nums[k++]=nums1[i++];
        }
        while(j<n){
            nums[k++]=nums2[j++];
        }

       for(int p=0;p<nums.length;p++){
           nums1[p]=nums[p];
       }

        
    }
}
//leetcode
Q12:Missing Number
Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.
Code:
class Solution {
    public int missingNumber(int[] nums) {
        for(int i=0;i<=nums.length;i++){
            boolean isAvailable=false;
            for(int j=0;j<nums.length;j++){
                if(nums[j]==i){
                    isAvailable=true;
                    break;
                }
            }
            if(!isAvailable){
                return i;
            }
        }

        return -1;
    }
}




